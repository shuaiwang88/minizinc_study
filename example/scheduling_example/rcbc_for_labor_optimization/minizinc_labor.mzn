% ----------------------------------------------------------------------------%
% labor optmization model
%
%
% ----------------------------------------------------------------------------%

% 1. Define sets ---------------------------------------------------------------

% 8 hours shift set. index:f;  ex: f4-12
enum ShiftSet;

% 0-24 hour. index s, t, i
% int: 24;% noofjob
set of int:  TimeSet = 1..24;
set of int:  TemperatureSet = 1..4;
% temperature zone index: k
% "1 = ambient, 2 = refrigerated, 3 = frozen";
% enum TemperatureSet;

% ------------------------------------------------------------------------------

% 2.Define parameters -----------------------------------------------------------
% MaxPickDelay by zone, index domain:k;
array[TemperatureSet] of float: MaxPickDelay;

% Demand by hours. IndexDomain (t,k)
array[TimeSet, TemperatureSet] of float: Demand;

% Maximum staffing hours 8 hours
int: MaxStaffHours = 3;

% Maximum inventory by zone. IndexDomain:k.
array[TemperatureSet] of int: MaxInventory;


% Shift Mapping. IndexDomain(f,s). eg: (f4-12, 4):1
array[ShiftSet, TimeSet] of int: ShiftMap;




% 3.Define variable -----------------------------------------------------------
% var number of workers by shift per hour
int: MaxNumWorkerbyHour = 100;
array[ShiftSet] of var 0..MaxNumWorkerbyHour: ShiftScheduling;


% var number of items to be picking in hour s at zone k for deliver hour t
% P(s,k,t)

float: MaxNumPickItem = 1000.0;
array[TimeSet, TemperatureSet, TimeSet] of var 0..MaxNumPickItem: PickScheduling;

% var number of items be to be picking by TEMP worker in hour s at zone k
% deliver hour t
% O(s,k,t)

array[TimeSet, TemperatureSet, TimeSet] of var 0..MaxNumPickItem: OverPickScheduling;


% var inventory in zone k at deliver hour i
% The total Inventory generated by two tpyes of picking activities.
% s is the picking time and t is the deliver time.
% where i is Inventory between s and t.


% Inventory(k,i)
  % sum((s,t) | (s <= i) and (t >= i),
  % PickScheduling(s,k,t)
  % + OverPickScheduling(s,k,t))


 /* sum(s | (s < t) and (s >= (t - MaxPickDelay(k))), PickScheduling(s,k,t) + */

 /* OverPickScheduling(s,k,t)) >= Demand(t, k); */
/* (s in TimeSet) (t) */

/* var int: tDamages = sum(h in HERO)(damage[h,pos[h]]); */
% array[TemperatureSet, TimeSet] of var

/* forall( [a[i] != a[j] | i,j in 1..3 where i < j]) */


% Define objective ------------------------------------------------------------
% Definition: sum(f, ShiftScheduling(f)) + 0.25*sum((s,k,t), OverPickScheduling(s,k,t)) + 0.1*sum((k,i), Inventory(k,i));
var float: objective = sum(f in ShiftSet)(ShiftScheduling[f]) +
    0.25 * sum(s in TimeSet, k in TemperatureSet, t in TimeSet)(OverPickScheduling[s,k,t]);
%     + 0.1 * sum(k in TemperatureSet, i in TimeSet)(Inventory[k,i]);


% Define Constraints ----------------------------------------------------------

% Demand satisfication
% IndexDomain: (t,k);
% Definition: sum(s | (s < t) and (s >= (t - MaxPickDelay(k))), PickScheduling(s,k,t) + OverPickScheduling(s,k,t)) >= Demand(t, k);

constraint 
forall(t in TimeSet, k in TemperatureSet) (
sum( s in TimeSet where s < t /\ s >= (t - MaxPickDelay[k]))(
    PickScheduling[s,k,t] + OverPickScheduling[s,k,t]) >= Demand[t,k]);


% Limit Max staff Hours
% IndexDomain: s
constraint
forall(s in TimeSet)(sum(k in TemperatureSet, t in
TimeSet)(PickScheduling[s,k,t]) <= sum( f in
ShiftSet)(ShiftMap[f,s]*ShiftScheduling[f]));


% limit to shifts
% IndexDomain s
constraint
forall(s in TimeSet)(sum(k in TemperatureSet, t in TimeSet)
(PickScheduling[s,k,t]) <= sum(f in ShiftSet)(ShiftScheduling[f]*ShiftMap[f,s]));


solve minimize objective;
output ["Objective: "++show(objective)++
show(PickScheduling)];
% output [ objective];
% output [ "\(p) = \(produce[p]);\n" | p in Products ]
