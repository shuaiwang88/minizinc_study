## ams_version=1.0

Model Main_Clicklist_Staffing {
    DeclarationSection DeclarationSets {
        Set ShiftSet {
            Index: f;
            Definition: data{f4-12, f6-14, f8-16, f10-18, f12-20, f14-22, f16-24};
        }
        Set TimeSet {
            Index: t, s, i;
            Definition: data{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23, 24 };
        }
        Set TemperatureSet {
            Index: k;
            Definition: data{1, 2, 3, 4};
            Comment: "1 = ambient, 2 = refrigerated, 3 = frozen";
        }
    }
    DeclarationSection Picking_Parameters {
        Parameter MaxPickDelay {
            IndexDomain: k;
            Definition: data { 1 : 5,  2 : 2, 3 : 2, 4 : 1 };
        }
    }
    DeclarationSection DeclarationParameters {
        Parameter Demand {
            IndexDomain: (t, k);
            InitialData: {
                data
                { (9, 1): 1.43, (9, 2): 0.71, (9, 3): 0.19, (9, 4): 0.14, (10,
                1): 1.51, (10, 2): 0.67, (10, 3): 0.16, (10, 4): 0.27, (11, 1):
                1.47, (11, 2): 0.89, (11, 3): 0.07, (11, 4): 0.69, (12, 1): 1.4,
                (12, 2): 1.09, (12, 3): 0, (12, 4): 1.37, (13, 1): 0.89, (13,
                2): 0.7, (13, 3): 0.12, (13, 4): 0.82, (14, 1): 3.18, (14, 2):
                1.59, (14, 3): 0.24, (14, 4): 0.41, (15, 1): 4.19, (15, 2): 2.1,
                (15, 3): 0.45, (15, 4): 0.96, (16, 1): 3.46, (16, 2): 2.33, (16,
                3): 0.79, (16, 4): 2.2, (17, 1): 3.96, (17, 2): 2.2, (17, 3):
                0.62, (17, 4): 1.92, (18, 1): 4.58, (18, 2): 2.9, (18, 3): 0.76,
                (18, 4): 3.43, (19, 1): 5.55, (19, 2): 3.52, (19, 3): 0.79, (19,
                4): 2.06, (20, 1): 4.09, (20, 2): 2.8, (20, 3): 0.47, (20, 4):
                1.65, (21, 1): 3.17, (21, 2): 2.45, (21, 3): 0.34, (21, 4): 2.06
                }
            }
        }
        Parameter MaxStaffHours {
            Definition: 8;
        }
        Parameter MaxInventory {
            IndexDomain: k;
            Definition: data { 1 : 999,  2 : 999,  3 : 999, 4 : 999 };
        }
        Parameter ShiftMap {
            IndexDomain: (f,s);
            Definition: {
                data { (f4-12, 4): 1, (f6-14, 6): 1, (f8-16, 8): 1, (f10-18,
                10): 1, (f12-20, 12): 1, (f14-22, 14): 1, (f16-24, 16): 1,
                (f4-12, 5): 1, (f6-14, 7): 1, (f8-16, 9): 1, (f10-18, 11): 1,
                (f12-20, 13): 1, (f14-22, 15): 1, (f16-24, 17): 1, (f4-12, 6):
                1, (f6-14, 8): 1, (f8-16, 10): 1, (f10-18, 12): 1, (f12-20, 14):
                1, (f14-22, 16): 1, (f16-24, 18): 1, (f4-12, 7): 1, (f6-14, 9):
                1, (f8-16, 11): 1, (f10-18, 13): 1, (f12-20, 15): 1, (f14-22,
                17): 1, (f16-24, 19): 1, (f4-12, 8): 1, (f6-14, 10): 1, (f8-16,
                12): 1, (f10-18, 14): 1, (f12-20, 16): 1, (f14-22, 18): 1,
                (f16-24, 20): 1, (f4-12, 9): 1, (f6-14, 11): 1, (f8-16, 13): 1,
                (f10-18, 15): 1, (f12-20, 17): 1, (f14-22, 19): 1, (f16-24, 21):
                1, (f4-12, 10): 1, (f6-14, 12): 1, (f8-16, 14): 1, (f10-18, 16):
                1, (f12-20, 18): 1, (f14-22, 20): 1, (f16-24, 22): 1, (f4-12,
                11): 1, (f6-14, 13): 1, (f8-16, 15): 1, (f10-18, 17): 1,
                (f12-20, 19): 1, (f14-22, 21): 1, (f16-24, 23): 1 }
            }
        }
    }
    DeclarationSection DeclarationVariables {
        Variable Inventory {
            IndexDomain: (k,i);
            Range: free;
            Definition: sum((s,t) | (s <= i) and (t >= i),
             PickScheduling(s,k,t)
            + OverPickScheduling(s,k,t));
Comment: "all the pick and overpick for this period, plus everything picked before now for";
        }
        Variable ShiftScheduling {
            IndexDomain: f;
            Range: integer;
        }
        Variable PickScheduling {
            IndexDomain: (s, k, t);
            Range: nonnegative;
        }
        Variable OverPickScheduling {
            IndexDomain: (s, k, t);
            Range: nonnegative;
        }
        Variable PlanCost {
            Range: free;
            Definition: sum(f, ShiftScheduling(f)) + 0.25*sum((s,k,t), OverPickScheduling(s,k,t)) + 0.1*sum((k,i), Inventory(k,i));
        }
        MathematicalProgram SchedulePickingPlan {
            Objective: PlanCost;
            Direction: minimize;
            Constraints: AllConstraints;
            Variables: AllVariables;
            Type: Automatic;
        }
    }
    DeclarationSection DeclarationConstraints {
        Constraint DemandSatisfied {
            IndexDomain: (t,k);
            Definition: sum(s | (s < t) and (s >= (t - MaxPickDelay(k))), PickScheduling(s,k,t) + OverPickScheduling(s,k,t)) >= Demand(t, k);
            Comment: {
                "t = 4 maxdelay = 1 then 4 <= 4 (ok) 4 >= (4-3) (ok?)
                and s >= (t - MaxPickDelay(k))
                + OverPickScheduling(k,t-1)"
            }
        }
        Constraint LimitToMaxStaffHours {
            IndexDomain: s;
            Definition: sum((k, t), PickScheduling(s,k,t)) <= sum(f, ShiftMap(f,s)*ShiftScheduling(f));
        }
        Constraint LimitToShifts {
            IndexDomain: s;
            Definition: sum((k,t), PickScheduling(s,k,t)) <= sum(f, ShiftScheduling(f)*ShiftMap(f,s));
        }
        Constraint LimitToMaxInventory {
            IndexDomain: (k,i);
            Definition: Inventory(k,i) <= MaxInventory(k);
        }
    }
    DeclarationSection Output_Parameters {
        Parameter SumPickingByK {
            IndexDomain: (s,t);
            Definition: Sum(k, PickScheduling(s,k,t) + OverPickScheduling(s,k,t));
        }
        Parameter SumPickingByT {
            IndexDomain: (k,s);
            Definition: Sum(t, PickScheduling(s,k,t) + OverPickScheduling(s,k,t));
        }
        Parameter Coverage {
            IndexDomain: s;
            Definition: sum(f, ShiftMap(f,s)*ShiftScheduling(f));
        }
        Parameter test;
    }
    Procedure MainInitialization;
    Procedure MainExecution {
        Body: {
            showprogresswindow;
            solve SchedulePickingPlan where MIP_Relative_Optimality_Tolerance := 0.00001, time_limit := 2000, Warning_duplicate_column := Off;
        }
    }
    Procedure MainTermination {
        Body: {
            return DataManagementExit();
        }
    }
}
